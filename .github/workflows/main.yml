name: Build, Test, and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'
  GO_MODULE_PATH: './local-k8s-cluster-go'
  BINARY_NAME: 'k3s-manager'

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  test-and-build:
    name: Test, Lint, and Build
    runs-on: ubuntu-latest
    
    outputs:
      should-release: ${{ steps.check-release.outputs.should-release }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.GO_MODULE_PATH }}
        run: go mod download && go mod verify

      - name: Run tests
        working-directory: ${{ env.GO_MODULE_PATH }}
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ${{ env.GO_MODULE_PATH }}/coverage.out
          flags: unittests

      - name: Run go vet
        working-directory: ${{ env.GO_MODULE_PATH }}
        run: go vet ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ${{ env.GO_MODULE_PATH }}
          args: --timeout=5m

      - name: Build multi-platform binaries
        working-directory: ${{ env.GO_MODULE_PATH }}
        run: |
          # Create bin directory
          mkdir -p bin
          
          # Build for multiple platforms
          platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64" "windows/amd64")
          
          for platform in "${platforms[@]}"; do
            export GOOS=${platform%/*}
            export GOARCH=${platform#*/}
            
            echo "Building for $GOOS/$GOARCH..."
            
            if [ "$GOOS" = "windows" ]; then
              BINARY_NAME_WITH_EXT="${BINARY_NAME}.exe"
            else
              BINARY_NAME_WITH_EXT="${BINARY_NAME}"
            fi
            
            go build -ldflags="-s -w" -o "bin/${BINARY_NAME}-${GOOS}-${GOARCH}${BINARY_NAME_WITH_EXT##*${BINARY_NAME}}" ./cmd
            
            # Create archives
            cd bin
            if [ "$GOOS" = "windows" ]; then
              zip "${BINARY_NAME}-${GOOS}-${GOARCH}.zip" "${BINARY_NAME}-${GOOS}-${GOARCH}.exe"
            else
              tar -czf "${BINARY_NAME}-${GOOS}-${GOARCH}.tar.gz" "${BINARY_NAME}-${GOOS}-${GOARCH}"
            fi
            cd ..
          done
          
          ls -la bin/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: ${{ env.GO_MODULE_PATH }}/bin/*.tar.gz
          
      - name: Upload build artifacts (Windows)
        uses: actions/upload-artifact@v3
        with:
          name: binaries-windows
          path: ${{ env.GO_MODULE_PATH }}/bin/*.zip

      - name: Check if should release
        id: check-release
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: test-and-build
    if: needs.test-and-build.outputs.should-release == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release dependencies
        run: |
          npm install -g semantic-release@23
          npm install -g @semantic-release/changelog@6
          npm install -g @semantic-release/git@10
          npm install -g @semantic-release/github@9
          npm install -g @semantic-release/exec@6
          npm install -g conventional-changelog-conventionalcommits@7

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: artifacts/

      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries-windows
          path: artifacts/

      - name: List artifacts
        run: ls -la artifacts/

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test-and-build, release]
    if: needs.test-and-build.outputs.should-release == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.GO_MODULE_PATH }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ env.BINARY_NAME }}:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}/${{ env.BINARY_NAME }}:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max