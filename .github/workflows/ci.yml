name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'local-k8s-cluster-go/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths: 
      - 'local-k8s-cluster-go/**'
      - '.github/workflows/**'

env:
  GO_VERSION: '1.24'
  GO_MODULE_PATH: './local-k8s-cluster-go'

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      working-directory: ${{ env.GO_MODULE_PATH }}
      run: go mod download && go mod verify

    - name: Run go vet
      working-directory: ${{ env.GO_MODULE_PATH }}
      run: go vet ./...

    - name: Run tests
      working-directory: ${{ env.GO_MODULE_PATH }}
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Check test coverage
      working-directory: ${{ env.GO_MODULE_PATH }}
      run: |
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ${{ env.GO_MODULE_PATH }}
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@v1
      with:
        args: '${{ env.GO_MODULE_PATH }}/...'

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test]
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
      working-directory: ${{ env.GO_MODULE_PATH }}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        echo "Building for $GOOS/$GOARCH..."
        go build -v -ldflags="-s -w" ./cmd
        echo "Build successful!"

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test only)
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.GO_MODULE_PATH }}
        push: false
        tags: k3s-manager:test
        cache-from: type=gha
        cache-to: type=gha,mode=max